version: 2.1
orbs:
  slack: circleci/slack@4.1
  aws-cli: circleci/aws-cli@3.1

commands:
  notify-slack:
    description: Send slack notification on failure
    steps:
      - slack/notify:
          event: fail
          mentions: '@benedict adu'
          template: basic_fail_1

  install_aws_cli:
    description: Install AWS cli
    steps:
      - run:
          name: Install AWS cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_nodejs:
     description: Install Node.js 14
     steps:
      - run:
          name: Install Node.js 14
          command: |
            curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -
            sudo apt install -y nodejs

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend<<parameters.workflow_id>>-backend"
            aws cloudformation delete-stack --stack-name "udapeople-frontend<<parameters.workflow_id>>-backend"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string 
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure "https://kvdb.io/LtKPKZje552BWpvP638Kuk/migration_${CIRCLE_WORKFLOW_ID:0:7}")
            if (( $SUCCESS == 1 )); then
              cd ~/project/backend
              npm install
              npm run migrations:revert
              exit 1
            fi

jobs:
  deploy:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - run: echo "deploy my app"
      - slack/notify:
          event: fail
          mentions: '@benedict adu'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          mentions: '@benedict adu'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
          
  build-backend:
    docker:
      - image: circleci/node:14.0.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          mentions: '@benedict adu'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  test-frontend:
    docker:
      - image: circleci/node:14.0.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
      - slack/notify:
          event: fail
          mentions: '@benedict adu'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
                
  test-backend:
    docker:
      - image: circleci/node:14.0.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
      - slack/notify:
          event: fail
          mentions: '@benedict adu'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  scan-frontend:
    docker:
      - image: circleci/node:14.0.0
    steps:
      - checkout
      - restore_cache:
          keys: [scanfrontend-test]
      - run:
          name: Scan-frontend 
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: scanfrontend-test
      - slack/notify:
          event: fail
          mentions: '@benedict adu'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  scan-backend:
    docker:
      - image: circleci/node:14.0.0
    steps:
      - checkout
      - restore_cache:
          keys: [scanbackend-test]
      - run:
          name: Scan-backend
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: scanbackend-test
      - notify-slack
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
              cat inventory.txt
              aws ec2 describe-instances \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --query "Reservations[*].Instances[*].PublicIpAddress" \
                --output text >> ~/project/.circleci/ansible/inventory.txt
              cat ~/project/.circleci/ansible/inventory.txt
      
      - run:
          name: save the new back-end url to memory using kvdb
          command: |
            backend_url=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            echo "backend_url: ${backend_url}"
            curl -X PUT -d "${backend_url}" https://kvdb.io/LtKPKZje552BWpvP638Kuk/backend_url
            curl https://kvdb.io/LtKPKZje552BWpvP638Kuk/backend_url
      - persist_to_workspace:
          root: ~/project
          paths:
            - .circleci/ansible/inventory.txt
      - notify-slack
      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure  

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "f2:ae:63:39:b1:9f:c7:65:56:3b:fc:43:40:1a:24:83"
      - attach_workspace:
          at: ~/project
    
      - install_ansible    
      - install_aws_cli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
      
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:14.0.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          key: backend-build
      - attach_workspace:
          at: ~/project
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
             curl --insecure https://kvdb.io/LtKPKZje552BWpvP638Kuk/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - notify-slack
      - destroy-environment
      - revert-migrations

  
  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout

      - add_ssh_keys:
          fingerprints: 
            - "f2:ae:63:39:b1:9f:c7:65:56:3b:fc:43:40:1a:24:83"
      - attach_workspace:
          at: ~/project

      - install_nodejs
      - install_aws_cli
      - install_ansible
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text 
            )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            sudo npm install -g npm@latest
            rm -rf node_modules
            npm install
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - notify-slack
      - destroy-environment
      - revert-migrations

     
                    
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "f2:ae:63:39:b1:9f:c7:65:56:3b:fc:43:40:1a:24:83"
      - attach_workspace:
          at: ~/project
      - install_nodejs
      - install_aws_cli
      - install_ansible
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            tar -czvf artifact.tar.gz .
            mv artifact.tar.gz .circleci/ansible/files
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - notify-slack
      - destroy-environment
      - revert-migrations


  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_nodejs
      - install_aws_cli

      - attach_workspace:
          at: ~/project
          
      - run:
          name: Backend smoke test.
          command: |
              BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text)
              export API_URL=http://${BACKEND_PUBLIC_IP}:3030
              echo ${BACKEND_PUBLIC_IP}
              echo backend-${CIRCLE_WORKFLOW_ID:0:7}
              echo ${API_URL}
              if curl -s $API_URL/api/status | grep "ok"
              then
                exit 0
              else
                exit 1
              fi
      - run:
          name: Frontend smoke test.
          command: |
              FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
              echo $FRONTEND_WEBSITE
              if curl -s $FRONTEND_WEBSITE | grep "Welcome"
              then
                exit 0
              else
                exit 1
              fi
      - notify-slack
      - destroy-environment
      - revert-migrations


 

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dep / Save Old Workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
            curl https://kvdb.io/LtKPKZje552BWpvP638Kuk/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --stack-name InitialStack
      - notify-slack
      - destroy-environment
      - revert-migrations
 

  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_aws_cli
      - run:
          name: Get old stack workflow id
          command: |
            export STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
            export OldWorkflowID=$(curl --insecure https://kvdb.io/LtKPKZje552BWpvP638Kuk/old_workflow_id)
            echo Old Workflow ID: $OldWorkflowID
      - run:
          name: Remove old stacks and files
          command: |
            WORKFLOW_ID=$(aws cloudformation list-exports \
              --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate \
              --output text)
            echo "WORKFLOW_ID: $WORKFLOW_ID"
            if [[ $WORKFLOW_ID != udapeople-${CIRCLE_WORKFLOW_ID:0:7} ]]
            then
              echo "$WORKFLOW_ID!=${RUN_ID:0:7} => will delete old infrastructure"
              aws s3 rm "s3://udapeople-${WORKFLOW_ID}" --recursive
              aws cloudformation delete-stack \
                --stack-name "udapeople-frontend-${WORKFLOW_ID}"
              aws cloudformation delete-stack \
                --stack-name "udapeople-backend-${WORKFLOW_ID}"
            else
              echo "$WORKFLOW_ID==${CIRCLE_WORKFLOW_ID:0:7} => nothing needs to be done"
            fi
      - notify-slack


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]